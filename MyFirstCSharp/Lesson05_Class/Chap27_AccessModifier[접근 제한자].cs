using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyFirstCSharp.Lesson05_Class
{
    // 접근 제한자. 
    // 프로그램 내에서 특정한 코드, 변수, 필드, 메서드 등  에 접근 하려고 (호출) 할때 
    // 권한 에 따라 호출 여부를 결정 지을 수 있는 제한자. 

    // 접근제한자 를 사용하는 이유
    //  - 캡슐화 ( 객체지향 언어에서 지켜야 하는 규칙 , 지켜야 하는 개념 ) 
    //   . 모든 기능과 변수를 외부에서 접근 가능한 코딩으로 구현할 경우
    //     개발 을 한 당사자 외에 여러 사용자에 따라
    //     1. 데이터의 변형을 일으키거나 정상적인 동작을 저해할 우려가 있다.
    //     2. 불필요 하게 너무 많은 기능을 외부에서 호출 가능하도록 하면 
    //        개발자 입장에서는 어떤 기능으 정확히 사용해야 하는지 혼란이 올 수 있다.
    //     따라서 코드 내부에서 처리되는 내용은 외부에서 접근 하지 못하도록 막고
    //     외부에서 호출하여 사용해야되는 핵심 기능만 접근 가능하도록 하여 
    //     효율적이고 안정성 있는 프로그램 을 구현하도록 하기 위하여 사용된다.
    //  ex)  1 -> 2 -> 3 -> 4 -> 5 의 순서로 구현되어야 되는 메서드가 있다고 가정을할때.
    //     5의 결과를 얻기 위해서는 반드시 1 부터 시작해야 하는데.
    //     1 외에 2 , 3, 4, 5, 메서드를 호출 가능한 상태로 만들어 버리면.
    //    1.  1 부터 시작해야 하는 정상 로직이 안전하게 구현 되지 못하는 오류가 발생할 수 있다.
    //    2.  개발자는 시작점이 어디인지 판단하기 힘들다. 

    internal class Chap27_AccessModifier
    {
        // 접근 제한자 
        // Public   : 모든 클래스 에서 접근 할 수 있다.
        // private  : 해당 클래스 내에서만 접근 할 수 있다. 
        //            . C# 의경우 접근제한자를 명시하는 부분에 접근 제한자를 표시 하지 않을때 
        //             기본으로 private 이 적용. 
        // internal  : 동일한 NameSpace 에서 접근 할 수 있다.
        // Protected : 파생 클래스에서 접근이 가능. 

        // 클래스의 인스턴스 변수  ( 클래스의 필드 멤버, 전역변수) 
        public string sPublic = "안녕하asdasd세요";        // 모든 곳에서 접근이 가능한 인스턴스 변수.
        private string sPrivate = "Private string"; // 해당 클래스에서만 호출이 가능한 인스턴스 변수.
        protected string sPartial = "Partial Class string"; // 분할 클래스 에서만 접근이 가능한 인스턴스 변수
    }
}
